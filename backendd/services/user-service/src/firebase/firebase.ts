import { Injectable } from '@nestjs/common';
import * as admin from 'firebase-admin';
import * as path from 'path';
import * as fs from 'fs';

@Injectable()
export class FirebaseAdminService {
  constructor() {
    this.initializeFirebaseAdmin();
  }

  private initializeFirebaseAdmin() {
    try {
      // V√©rifier si l'application Firebase Admin est d√©j√† initialis√©e
      if (admin.apps.length > 0) {
        console.log('Firebase Admin SDK d√©j√† initialis√©.');
        return;
      }

      // Chemin vers le fichier de service account
      const serviceAccountPath = path.resolve(__dirname, '../../../config/firebase-service-account.json');
      
      // V√©rifier que le fichier existe
      if (!fs.existsSync(serviceAccountPath)) {
        throw new Error(`Fichier de cl√© de service introuvable: ${serviceAccountPath}`);
      }

      // Lire et valider le fichier JSON
      const serviceAccount = require(serviceAccountPath);
      
      // V√©rifications de base du fichier de service account
      if (!serviceAccount.private_key || !serviceAccount.client_email || !serviceAccount.project_id) {
        throw new Error('Fichier de cl√© de service invalide - propri√©t√©s manquantes');
      }

      // Initialiser Firebase Admin
      admin.initializeApp({
        credential: admin.credential.cert(serviceAccount),
        storageBucket: 'resa-4a1b6.appspot.com',
      });

      console.log('Firebase Admin SDK initialis√© avec succ√®s.');
      console.log(`Projet ID: ${serviceAccount.project_id}`);
      console.log(`Client Email: ${serviceAccount.client_email}`);
      
    } catch (error) {
      console.error('Erreur lors de l\'initialisation de Firebase Admin SDK:', error);
      
      // Messages d'erreur sp√©cifiques
      if (error.message.includes('invalid_grant')) {
        console.error('üîë La cl√© de service Firebase est invalide ou expir√©e.');
        console.error('üìù Actions √† effectuer :');
        console.error('   1. G√©n√©rer une nouvelle cl√© dans Firebase Console');
        console.error('   2. Remplacer le fichier firebase-service-account.json');
        console.error('   3. V√©rifier la synchronisation de l\'horloge du serveur');
      }
      
      throw new Error(`Erreur d'initialisation Firebase Admin SDK: ${error.message}`);
    }
  }

  // R√©cup√®re l'instance de l'application Firebase Admin
  get firebaseApp(): admin.app.App {
    if (admin.apps.length === 0) {
      throw new Error('Firebase Admin SDK non initialis√©');
    }
    return admin.app();
  }

  // V√©rification du token Firebase avec retry
  async verifyIdToken(token: string, retries: number = 1) {
    if (!token) {
      throw new Error('Token non fourni');
    }

    for (let attempt = 0; attempt <= retries; attempt++) {
      try {
        const decodedToken = await this.firebaseApp.auth().verifyIdToken(token);
        console.log('Token v√©rifi√© avec succ√®s:', {
          uid: decodedToken.uid,
          email: decodedToken.email,
          exp: new Date(decodedToken.exp * 1000).toISOString()
        });
        return decodedToken;
        
      } catch (error) {
        console.error(`Tentative ${attempt + 1}/${retries + 1} - Erreur v√©rification token:`, error.message);
        
        if (attempt === retries) {
          // Derni√®re tentative √©chou√©e
          if (error.code === 'auth/id-token-expired') {
            throw new Error('Token Firebase expir√©');
          } else if (error.code === 'auth/id-token-revoked') {
            throw new Error('Token Firebase r√©voqu√©');
          } else if (error.code === 'auth/invalid-id-token') {
            throw new Error('Token Firebase invalide');
          } else {
            throw new Error(`Erreur de v√©rification du token: ${error.message}`);
          }
        }
        
        // Attendre avant la prochaine tentative
        if (attempt < retries) {
          await new Promise(resolve => setTimeout(resolve, 1000));
        }
      }
    }
  }

  // M√©thode utilitaire pour tester la connexion
  async testConnection(): Promise<boolean> {
    try {
      const auth = this.firebaseApp.auth();
      // Tenter de lister les utilisateurs (limit√© √† 1) pour tester la connexion
      await auth.listUsers(1);
      console.log('‚úÖ Connexion Firebase Admin test√©e avec succ√®s');
      return true;
    } catch (error) {
      console.error('‚ùå √âchec du test de connexion Firebase Admin:', error.message);
      return false;
    }
  }
}